# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ventanaNuevaReserva.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from datetime import datetime
#from ventanaInicio import Inicio

from PyQt5 import QtCore, QtWidgets
import mysql.connector

class NuevaReserva(object):

    #codigoReservaInt = 0
    #fechaInicialSql = 2023-7-21
    #fechaFinalSql = 2023-7-22
    fechaInicioModificada = ""
    fechaFinalModificada = ""
    datosRellenados = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Nueva Reserva")
        MainWindow.resize(869, 455)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textFecInicial = QtWidgets.QLineEdit(self.centralwidget)
        self.textFecInicial.setGeometry(QtCore.QRect(249, 32, 116, 22))
        self.textFecInicial.setObjectName("textFecInicial")
        self.textFecFinal = QtWidgets.QLineEdit(self.centralwidget)
        self.textFecFinal.setGeometry(QtCore.QRect(629, 32, 116, 22))
        self.textFecFinal.setObjectName("textFecFinal")
        self.textLitros = QtWidgets.QLineEdit(self.centralwidget)
        self.textLitros.setGeometry(QtCore.QRect(629, 78, 116, 22))
        self.textLitros.setObjectName("textLitros")
        self.textCodReserva = QtWidgets.QLineEdit(self.centralwidget)
        self.textCodReserva.setGeometry(QtCore.QRect(249, 78, 116, 22))
        self.textCodReserva.setObjectName("textCodReserva")
        self.labelFechaInicial = QtWidgets.QLabel(self.centralwidget)
        self.labelFechaInicial.setGeometry(QtCore.QRect(45, 35, 192, 16))
        self.labelFechaInicial.setObjectName("labelFechaInicial")
        self.labelFechaFinal = QtWidgets.QLabel(self.centralwidget)
        self.labelFechaFinal.setGeometry(QtCore.QRect(438, 35, 179, 16))
        self.labelFechaFinal.setObjectName("labelFechaFinal")
        self.labelLitros = QtWidgets.QLabel(self.centralwidget)
        self.labelLitros.setGeometry(QtCore.QRect(438, 81, 152, 16))
        self.labelLitros.setObjectName("labelLitros")
        self.labelCodigoReserva = QtWidgets.QLabel(self.centralwidget)
        self.labelCodigoReserva.setGeometry(QtCore.QRect(45, 81, 167, 16))
        self.labelCodigoReserva.setObjectName("labelCodigoReserva")
        self.comboBox_Coches = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_Coches.setGeometry(QtCore.QRect(50, 230, 421, 20))
        self.comboBox_Coches.setObjectName("comboBox_Coches")
        self.comboBox_Clientes = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_Clientes.setGeometry(QtCore.QRect(50, 180, 421, 20))
        self.comboBox_Clientes.setObjectName("comboBox_Clientes")
        self.okButton = QtWidgets.QPushButton(self.centralwidget)
        self.okButton.setGeometry(QtCore.QRect(130, 340, 93, 28))
        self.okButton.setObjectName("okButton")
        self.atrasButton = QtWidgets.QPushButton(self.centralwidget)
        self.atrasButton.setGeometry(QtCore.QRect(610, 340, 93, 28))
        self.atrasButton.setObjectName("atrasButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 869, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.okButton.clicked.connect(lambda: self.capturarDatos())
        #Añadimos función al botón cancel
        self.atrasButton.clicked.connect(lambda: self.ejecutarFunciones(MainWindow))


        self.llenarComboClientes(self.comboBox_Clientes)
        self.llenarComboCoches(self.comboBox_Coches)



    def establecerConexionBD(self):
        conexion = mysql.connector.connect(
            host='localhost',
            port=3306,
            user='root',
            password='castelao',
            db='UD02BDReservaCoches')
        
        return conexion


    def ejecutarFunciones(self, MainWindow):
        self.mostrarInicio()
        MainWindow.close()

    def consultaBDNombre(self):
        conexion = self.establecerConexionBD()
        cur=conexion.cursor()
        cur.execute("SELECT * FROM clientes WHERE clNif=12131414P")
        result = cur.fetchall()
        for x in result:
            print(x)
        cur.close()
        conexion.close()

    def mostrarInicio(self):
        from ventanaInicio import Inicio
        self.ventanaInicio = QtWidgets.QMainWindow()
        self.inicio = Inicio()
        self.inicio.setupUi(self.ventanaInicio)
        self.ventanaInicio.show()

    def capturarDatos(self):
        #self.fechaInicial = '21/07/2023'
        self.fechaInicial = self.textFecInicial.text()
        self.fechaFinal = self.textFecFinal.text()
        self.litros = self.textLitros.text()
        self.codigoReserva = self.textCodReserva.text()

        contador = 0

        if self.fechaInicial:
            try:
                self.fechaInicialDate = datetime.strptime(self.fechaInicial, '%d/%m/%Y')
                self.fechaInicialSql = self.fechaInicialDate.strftime('%Y/%m/%d')
                contador+=1
                # Continuar con el código que sigue después de la conversión
            except ValueError:
                print("Error: La fecha inicial no está en el formato correcto (dd/mm/yyyy)")
        else:
            print("Error: La fecha inicial está vacía")

        if self.fechaFinal:
            try:
                self.fechaFinalDate = datetime.strptime(self.fechaFinal, '%d/%m/%Y')
                self.fechaFinalSql = self.fechaFinalDate.strftime('%Y/%m/%d')
                contador+=1
                # Continuar con el código que sigue después de la conversión
            except ValueError:
                print("Error: La fecha final no está en el formato correcto (dd/mm/yyyy)")
        else:
            print("Error: La fecha final está vacía")

        if self.litros:
            try:
                self.litrosInt = int(self.litros)
                # Continuar con el código que sigue después de la conversión
            except ValueError:
                print("Error: La cadena no contiene un número entero válido")
        else:
            print("Error: La cadena está vacía")

        if self.codigoReserva:
            try:
                self.codigoReservaInt = int(self.codigoReserva)
                contador+=1
                # Continuar con el código que sigue después de la conversión
            except ValueError:
                print("Error: La cadena no contiene un número entero válido")
        else:
            print("Error: La cadena está vacía")

        if(contador==3):
            self.datosRellenados = True
            self.insertarRegistroBD(self.codigoReservaInt, self.fechaInicialSql, self.fechaFinalSql)

        #self.fechaInicialDate = datetime.strptime(self.fechaInicial, '%d/%m/%Y')
        #self.fechaFinalDate = datetime.strptime(self.fechaFinal, '%d/%m/%Y')
        #self.litrosInt = int(self.litros)
        #self.codigoReservaInt = int(self.codigoReserva)


    def insertarRegistroBD(self, codigoReservaInt, fechaInicialSql, fechaFinalSql):
        #self.modificarFechaInicio()
        #self.modificarFechaFin()
        #self.capturarDatos()
        if(self.datosRellenados==True):
            conexion = self.establecerConexionBD()
            cur = conexion.cursor()
            qwery = "INSERT INTO reservas (reCodigo, reFecInicio, reFecFinal) VALUES ('{}', '{}', '{}')".format(codigoReservaInt, fechaInicialSql, fechaFinalSql)
            #val = (self.codigoReservaInt, self.fechaInicialDate, self.fechaFinalDate)
            cur.execute(qwery)

            conexion.commit()
            print(cur.rowcount, "registro insertado")

            cur.close()
            conexion.close()
            self.limpiarCampos()
            self.datosRellenados = False
        else:
            return


    def llenarComboClientes(self, combo):
        conexion = self.establecerConexionBD()
        cur = conexion.cursor()
        qwery = "SELECT * FROM Clientes"
        cur.execute(qwery)
        resultados = cur.fetchall()

        for resultado in resultados:
            fila = " - ".join([str(valor) for valor in resultado])
            combo.addItem(fila)

        cur.close()
        conexion.close()

    def llenarComboCoches(self, combo):
        conexion = self.establecerConexionBD()
        cur = conexion.cursor()
        qwery = "SELECT * FROM Coches"
        cur.execute(qwery)
        resultados = cur.fetchall() 

        for resultado in resultados:
            fila = " - ".join([str(valor) for valor in resultado])
            combo.addItem(fila)

        cur.close()
        conexion.close()


    """ def llenarComboCoches(self, combo):
        conexion = mysql.connector.connect(
            host='localhost',
            port=3306,
            user='root',
            password='castelao',
            db='UD02BDReservaCoches')
        cur = conexion.cursor()
        qwery = "SELECT * FROM Coches"
        cur.execute(qwery)
        resultados = cur.fetchall()

        for resultado in resultados:
            contador=0
            fragmento=""
            
            for valor in resultado:
                if contador==4:
                    nuevoFragmento = " - "+str(valor) + " lit"
                    fila = str(fragmento).join(nuevoFragmento)
                    contador+=1
                    continue
                if contador==6:
                    nuevoFragmento = " - "+str(valor) + " €"
                    fila = str(fragmento).join(nuevoFragmento)
                    contador+=1
                    continue
                nuevoFragmento = " - "+str(valor)
                fila = str(fragmento).join(nuevoFragmento)
                contador+=1
                
            combo.addItem(fila)
            

        cur.close()
        conexion.close() """


    def modificarFechaInicio(self):
        fechaInicioModificada = self.textFecInicial.text()
        listFechaInicial = fechaInicioModificada.split("/")
        listFechaInicialModificado = []

        for i in reversed(listFechaInicial):
            listFechaInicialModificado.append(i)

        anhoInicio = listFechaInicialModificado[0]
        mesInicio = listFechaInicialModificado[1]
        diaInicio = listFechaInicialModificado[2]
        
        fechaInicioModificada = str(anhoInicio)+"-"+str(mesInicio)+"-"+str(diaInicio)

    
    def modificarFechaFin(self):
        fechaFinalModificada = self.textFecFinal.text()
        listFechaFinal = fechaFinalModificada.split("/")
        listFechaFinalModificado = []

        for i in reversed(listFechaFinal):
            listFechaFinalModificado.append(i)

        anhoInicio = listFechaFinalModificado[0]
        mesInicio = listFechaFinalModificado[1]
        diaInicio = listFechaFinalModificado[2]
        
        fechaFinalModificada = str(anhoInicio)+"-"+str(mesInicio)+"-"+str(diaInicio)

    
    def limpiarCampos(self):
        self.textCodReserva.setText("")
        self.textFecInicial.setText("")
        self.textFecFinal.setText("")
        self.textLitros.setText("")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Nueva Reserva"))
        self.labelFechaInicial.setText(_translate("MainWindow", "Fecha Inicial (DD/MM/AAAA):"))
        self.labelFechaFinal.setText(_translate("MainWindow", "Fecha Final (DD/MM/AAAA):"))
        self.labelLitros.setText(_translate("MainWindow", "Litros Consumidos:"))
        self.labelCodigoReserva.setText(_translate("MainWindow", "Código Reserva:"))
        self.okButton.setText(_translate("MainWindow", "OK"))
        self.atrasButton.setText(_translate("MainWindow", "Atrás"))

        self.okButton.clicked.connect(self.capturarDatos)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = NuevaReserva()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

